Demonstration 1

Provide a document that demonstrates your knowledge of some basic
algorithm analysis. The document can be a word document, powerpoint
slides, a video presentation, …. The format isn’t important and it
doesn’t need to be formal.

In the document demonstrate your ability to perform the following tasks:

1.  Take a fragment of code or pseudocode, and demonstrate you ability
    to do “frequency counting” of the statements/operations/blocks of
    operations in the code. (As in the example on page 181 of Algs4.)
    The code or algorithm you choose is whatever you would like in
    whatever language/pseudolanguage you wouldlike, so long as it is
    sufficiently complex to effectively demonstrate frequency counting.
    In the course of this, you might demonstrate use of a summation
    formula and/or induction if appropriate.

2.  Take a fragment of code or pseudocode, and demonstrate you ability
    to do determine an appropriate cost model (aka performance model)
    for the code fragment. Explain the assumptions you made as to why
    your choice of performance model was appropriate. The code or
    algorithm you choose is whatever you would like, so that is
    sufficient to demonstrate frequency counting. It would probably be
    convenient to use the same code fragment you chose for problem 1.

3.  Demonstrate that some function/algorithm/code fragment is O() or \~
    some other function. This would be similar to the problems in POA
    3.3 or 3.4. You can choose the functions you want to work with and
    they needn’t be the same as used in your other problems.

4.  Set up and solve a recurrence relation that represents the
    performance of a function (of your choice). There are examples of
    this in Algs4, pp272, 293, 383; in section 4 of POA; in the
    Algorithm Analysis 3 section of the LNOA; and in chapter 10 of Math
    for CS.

Your demonstrations should be your own work and should not be trivial
examples of the particular processes. They can be based on examples you
have seen before, but you should be able to create the solutions
entirely from memory, without reference to any sources while doing the
demonstrations.
